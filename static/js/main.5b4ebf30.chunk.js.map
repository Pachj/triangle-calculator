{"version":3,"sources":["UserNumberInput.jsx","InputForm.jsx","Canvas.jsx","App.jsx","index.jsx"],"names":["UserNumberInput","props","useState","invalidInput","setInvalidInput","className","TextField","type","label","straightA","angleAlpha","straightB","angleBeta","straightC","angleGamma","name","onChange","e","target","value","Number","isNaN","parseFloat","handleInput","userInput","disabled","error","helperText","InputForm","Button","sx","margin","variant","onClick","calculate","resetCalculator","Canvas","toRadians","angle","Math","PI","bX","sideA","cX","angleB","sideC","sin","cY","cos","canvasRef","useRef","useEffect","multiplier","calculateLargestDistance","x1","y1","x2","y2","x","y","sqrt","distanceAToB","distanceAToC","distanceBToC","largestDistance","calculateMultiplier","context","current","getContext","beginPath","moveTo","lineTo","closePath","stroke","width","height","ref","App","setUserInput","showCanvas","setShowCanvas","isError","setIsError","sideWithTwoAttachedAngles","userInputArray","side","angleBefore","angleAfter","tmpUserInputArray","forEach","item","position","angleAttachedBeforeIndex","angleAttachedBeforeBool","angleAttachedAfterBool","index","angleFloating","length","angleFloatingRadians","sineFloating","angleAfterRadians","sineAfter","angleBeforeRadians","sineBefore","midValue","sideThree","sideThreeIndex","sideTwo","sideTwoIndex","initCalcMap","calcFunction","a","b","c","acos","mappingArrays","matchingCount","minRequiredMatches","sidesWithValue","push","sideOne","angleAtSideOneIndex","angleAtSideOneRadians","angleAtSideTwoRadians","angleAtSideTwoIndex","angleBetweenIndex","angleAtSideOne","angleAtSideTwo","angleBetween","asin","angleBetweenRadians","cosine","pow","angleAttached","angleFloatingIndex","anglesWithValue","angleOne","angleTwo","event","flattenValue","input","userInputArrayFlattened","calcMap","actualCalcMap","i","tmpCountArray","actualMappingArray","tmpCount","actualMappingArrayValue","j","max","apply","filter","sort","result","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b4ebf30.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { TextField } from '@mui/material';\n\nexport default function UserNumberInput(props) {\n  const labelMapping = {\n    straightA: 'Seite A',\n    angleAlpha: 'Winkel Alpha',\n    straightB: 'Seite B',\n    angleBeta: 'Winkel Beta',\n    straightC: 'Seite C',\n    angleGamma: 'Winkel Gamma',\n  };\n\n  const [invalidInput, setInvalidInput] = useState(false);\n\n  return (\n    <div className=\"inputFieldContainer\">\n      <TextField\n        type=\"text\"\n        label={labelMapping[props.name]}\n        name={props.name}\n        onChange={(e) => {\n          if (e.target.value === '' || !Number.isNaN(Number.parseFloat(e.target.value))) {\n            setInvalidInput(false);\n            props.handleInput(e);\n          } else {\n            setInvalidInput(true);\n          }\n        }}\n        value={props.userInput[props.name]}\n        disabled={props.disabled}\n        error={invalidInput}\n        helperText={invalidInput === true ? 'ungültige Eingabe' : ''}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Button } from \"@mui/material\";\nimport UserNumberInput from \"./UserNumberInput\";\n\nexport default function InputForm(props) {\n  return (\n    <div className=\"inputForm\">\n      <UserNumberInput\n        name=\"straightA\"\n        handleInput={props.handleInput}\n        userInput={props.userInput}\n        disabled={props.disabled}\n      />\n      <UserNumberInput\n        name=\"angleBeta\"\n        handleInput={props.handleInput}\n        userInput={props.userInput}\n        disabled={props.disabled}\n      />\n      <UserNumberInput\n        name=\"straightC\"\n        handleInput={props.handleInput}\n        userInput={props.userInput}\n        disabled={props.disabled}\n      />\n      <UserNumberInput\n        name=\"angleAlpha\"\n        handleInput={props.handleInput}\n        userInput={props.userInput}\n        disabled={props.disabled}\n      />\n      <UserNumberInput\n        name=\"straightB\"\n        handleInput={props.handleInput}\n        userInput={props.userInput}\n        disabled={props.disabled}\n      />\n      <UserNumberInput\n        name=\"angleGamma\"\n        handleInput={props.handleInput}\n        userInput={props.userInput}\n        disabled={props.disabled}\n      />\n      <div className=\"buttonContainer\">\n        <Button\n          sx={{ margin: \"10px\" }}\n          variant=\"outlined\"\n          onClick={props.calculate}\n          disabled={props.disabled}\n        >\n          Berechnen\n        </Button>\n        <Button\n          sx={{ margin: \"10px\" }}\n          variant=\"outlined\"\n          onClick={props.resetCalculator}\n        >\n          Zurücksetzen\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useRef } from \"react\";\n\nexport default function Canvas(props) {\n  const toRadians = (angle) => angle * (Math.PI / 180);\n\n  const aX = 0;\n  const aY = 0;\n  const bX = aX + props.sideA;\n  const bY = aY;\n  const cX = () => {\n    if (props.angleB < 90) {\n      return bX - props.sideC * Math.sin(toRadians(90 - props.angleB));\n    }\n    return bX + props.sideC * Math.sin(-1 * toRadians(90 - props.angleB));\n  };\n  const cY = () => {\n    if (props.angleB < 90) {\n      return bY + props.sideC * Math.cos(toRadians(90 - props.angleB));\n    }\n    return bY + props.sideC * Math.cos(-1 * toRadians(90 - props.angleB));\n  };\n\n  const canvasRef = useRef(null);\n\n  const calculateMultiplier = () => {\n    const calculateLargestDistance = (x1, y1, x2, y2) => {\n      const x = x1 - x2;\n      const y = y1 - y2;\n\n      return Math.sqrt(x * x + y * y);\n    };\n\n    const distanceAToB = calculateLargestDistance(aX, aY, bX, bY);\n    const distanceAToC = calculateLargestDistance(aX, aY, cX(), cY());\n    const distanceBToC = calculateLargestDistance(bX, bY, cX(), cY());\n\n    let largestDistance = 0;\n\n    if (distanceAToB > largestDistance) largestDistance = distanceAToB;\n    if (distanceAToC > largestDistance) largestDistance = distanceAToC;\n    if (distanceBToC > largestDistance) largestDistance = distanceBToC;\n\n    return 400 / largestDistance;\n  };\n\n  useEffect(() => {\n    const multiplier = calculateMultiplier();\n\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    context.beginPath();\n    context.moveTo(aX, aY);\n    context.lineTo(bX * multiplier, bY * multiplier);\n    context.lineTo(cX() * multiplier, cY() * multiplier);\n    context.closePath();\n    context.stroke();\n  }, []);\n\n  return (\n    <div className=\"canvasContainer\">\n      <canvas width=\"400\" height=\"400\" ref={canvasRef} />\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport InputForm from './InputForm';\nimport Canvas from './Canvas';\n\nfunction App() {\n  const [userInput, setUserInput] = useState({\n    straightA: 0,\n    angleAlpha: 0,\n    straightB: 0,\n    angleBeta: 0,\n    straightC: 0,\n    angleGamma: 0,\n  });\n\n  const [showCanvas, setShowCanvas] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const allSides = (userInputArray) => {\n    const tmpUserInputArray = userInputArray;\n\n    const a = userInputArray[0];\n    const b = userInputArray[2];\n    const c = userInputArray[4];\n\n    tmpUserInputArray[1] = Math.acos((a * a - b * b - c * c) / (-2 * b * c)) / (Math.PI / 180);\n    tmpUserInputArray[3] = Math.acos((b * b - a * a - c * c) / (-2 * a * c)) / (Math.PI / 180);\n    tmpUserInputArray[5] = 180 - userInputArray[1] - userInputArray[3];\n\n    return tmpUserInputArray;\n  };\n\n  const twoSidesAngleAttached = (userInputArray) => {\n    const tmpUserInputArray = userInputArray;\n\n    const sidesWithValue = [];\n    tmpUserInputArray.forEach((item, position) => {\n      if (item > 0 && position % 2 === 0) {\n        sidesWithValue.push({ value: item, index: position });\n      }\n    });\n\n    // index angehängter Winkel immer sideOne -1 oder sideTwo +1\n    let sideOne = sidesWithValue[0];\n    let sideTwo = sidesWithValue[1];\n\n    // case if the two sides are a and b, array begins at a so side b would be sideOne even if index of it is higher\n    if (sidesWithValue[0].index === 0 && sidesWithValue[1].index === 4) {\n      // eslint-disable-next-line prefer-destructuring\n      sideOne = sidesWithValue[1];\n      // eslint-disable-next-line prefer-destructuring\n      sideTwo = sidesWithValue[0];\n    }\n\n    let angleAtSideOneIndex = (sideOne.index - 1) % tmpUserInputArray.length;\n    // only happens when sides a and c are present\n    if (angleAtSideOneIndex === -1) {\n      angleAtSideOneIndex = 5;\n    }\n\n    const angleAtSideTwoIndex = sideTwo.index + 1;\n    const angleBetweenIndex = sideOne.index + 1;\n    const sideThreeIndex = (sideTwo.index + 2) % tmpUserInputArray.length;\n\n    let angleAtSideOne = tmpUserInputArray[angleAtSideOneIndex];\n    let angleAtSideTwo = tmpUserInputArray[angleAtSideTwoIndex];\n    let angleBetween = tmpUserInputArray[angleBetweenIndex];\n    let angleAtSideOneRadians;\n    let angleAtSideTwoRadians;\n\n    if (angleAtSideOne > 0) {\n      // calculate angleAtSideTwo\n\n      angleAtSideOneRadians = (Math.PI / 180) * angleAtSideOne;\n      angleAtSideTwoRadians = Math.asin(\n        (Math.sin(angleAtSideOneRadians) / sideTwo.value) * sideOne.value,\n      );\n      angleAtSideTwo = (180 / Math.PI) * angleAtSideTwoRadians;\n    } else {\n      // calculate angle at side one\n\n      angleAtSideTwoRadians = (Math.PI / 180) * angleAtSideTwo;\n\n      const sin = Math.sin(angleAtSideTwoRadians) / sideOne.value;\n\n      angleAtSideOneRadians = Math.asin(sin * sideTwo.value);\n\n      angleAtSideOne = (180 / Math.PI) * angleAtSideOneRadians;\n    }\n    angleBetween = 180 - angleAtSideOne - angleAtSideTwo;\n\n    const angleBetweenRadians = (Math.PI / 180) * angleBetween;\n    const sideThree =\n      (sideTwo.value / Math.sin(angleAtSideOneRadians)) * Math.sin(angleBetweenRadians);\n\n    tmpUserInputArray[angleBetweenIndex] = angleBetween;\n    tmpUserInputArray[angleAtSideOneIndex] = angleAtSideOne;\n    tmpUserInputArray[angleAtSideTwoIndex] = angleAtSideTwo;\n    tmpUserInputArray[sideThreeIndex] = sideThree;\n\n    return tmpUserInputArray;\n  };\n\n  const twoSidesAngleBetween = (userInputArray) => {\n    const tmpUserInputArray = userInputArray;\n\n    // same as twoSidesOneAngleAttached\n    const sidesWithValue = [];\n\n    tmpUserInputArray.forEach((item, position) => {\n      if (item > 0 && position % 2 === 0) {\n        sidesWithValue.push({ value: item, index: position });\n      }\n    });\n\n    // index angehängter Winkel immer sideOne -1 oder sideTwo +1\n    let sideOne = sidesWithValue[0];\n    let sideTwo = sidesWithValue[1];\n\n    // case if the two sides are a and b, array begins at a so side b would be sideOne even if index of it is higher\n    if (sidesWithValue[0].index === 0 && sidesWithValue[1].index === 4) {\n      // eslint-disable-next-line prefer-destructuring\n      sideOne = sidesWithValue[1];\n      // eslint-disable-next-line prefer-destructuring\n      sideTwo = sidesWithValue[0];\n    }\n\n    let angleAtSideOneIndex = (sideOne.index - 1) % tmpUserInputArray.length;\n\n    // only happens when sides a and c are present\n    if (angleAtSideOneIndex === -1) {\n      angleAtSideOneIndex = 5;\n    }\n\n    const angleAtSideTwoIndex = sideTwo.index + 1;\n    const angleBetweenIndex = sideOne.index + 1;\n    const sideThreeIndex = (sideTwo.index + 2) % tmpUserInputArray.length;\n    const angleBetween = tmpUserInputArray[angleBetweenIndex];\n    const angleBetweenRadians = (Math.PI / 180) * angleBetween;\n\n    let angleAtSideOne = tmpUserInputArray[angleAtSideOneIndex];\n    let angleAtSideTwo = tmpUserInputArray[angleAtSideTwoIndex];\n\n    const cosine = Math.cos(angleBetweenRadians);\n    const sideThree = Math.sqrt(\n      // eslint-disable-next-line no-restricted-properties\n      Math.pow(sideTwo.value, 2) +\n        // eslint-disable-next-line no-restricted-properties\n        Math.pow(sideOne.value, 2) -\n        2 * sideTwo.value * sideOne.value * cosine,\n    );\n\n    // same as before\n    // you can calculate angle of side two if you have angle at side one, side one and side two\n    const angleAtSideOneRadians = Math.asin(\n      (Math.sin(angleBetweenRadians) / sideThree) * sideTwo.value,\n    );\n    angleAtSideOne = angleAtSideOneRadians / (Math.PI / 180);\n    angleAtSideTwo = 180 - angleAtSideOne - angleBetween;\n\n    tmpUserInputArray[angleBetweenIndex] = angleBetween;\n    tmpUserInputArray[angleAtSideOneIndex] = angleAtSideOne;\n    tmpUserInputArray[angleAtSideTwoIndex] = angleAtSideTwo;\n    tmpUserInputArray[sideThreeIndex] = sideThree;\n\n    return tmpUserInputArray;\n  };\n\n  const oneSideAngleAttachedAngleFloating = (userInputArray) => {\n    const tmpUserInputArray = userInputArray;\n\n    let side;\n    let angleAttached;\n    let angleFloating;\n\n    let angleAttachedBeforeBool = false;\n    let angleAttachedAfterBool = false;\n\n    let angleAttachedBeforeIndex;\n\n    tmpUserInputArray.forEach((item, position) => {\n      if (item > 0 && position % 2 === 0) {\n        // angle before is y\n        angleAttachedBeforeIndex = position - 1;\n        if (angleAttachedBeforeIndex === -1) {\n          angleAttachedBeforeIndex = 5;\n        }\n\n        angleAttachedBeforeBool = tmpUserInputArray[angleAttachedBeforeIndex] > 0;\n        angleAttachedAfterBool = tmpUserInputArray[position + 1] > 0;\n\n        const angleAttachedBool = angleAttachedBeforeBool || angleAttachedAfterBool;\n        const angleAttachedAndAngleFloating =\n          angleAttachedBool && tmpUserInputArray[(position + 3) % tmpUserInputArray.length] > 0;\n\n        if (angleAttachedAndAngleFloating) {\n          side = { value: item, index: position };\n          const angleFloatingIndex = (position + 3) % tmpUserInputArray.length;\n          angleFloating = {\n            value: tmpUserInputArray[angleFloatingIndex],\n            index: angleFloatingIndex,\n          };\n\n          if (angleAttachedBeforeBool) {\n            angleAttached = tmpUserInputArray[angleAttachedBeforeIndex];\n          } else {\n            angleAttached = tmpUserInputArray[position + 1];\n          }\n        }\n      }\n    });\n    let angleAfter;\n    let angleBefore;\n    // angle that is known is after the known side\n    if (angleAttachedAfterBool) {\n      angleAfter = angleAttached;\n      angleBefore = 180 - angleAfter - angleFloating.value;\n    }\n    // angle that is known is before the known side\n    else {\n      angleBefore = angleAttached;\n      angleAfter = 180 - angleBefore - angleFloating.value;\n    }\n    // we have all angles and one side\n    const angleFloatingRadians = (Math.PI / 180) * angleFloating.value;\n    const sineFloating = Math.sin(angleFloatingRadians);\n\n    const angleAfterRadians = (Math.PI / 180) * angleAfter;\n    const sineAfter = Math.sin(angleAfterRadians);\n\n    const angleBeforeRadians = (Math.PI / 180) * angleBefore;\n    const sineBefore = Math.sin(angleBeforeRadians);\n\n    const midValue = side.value / sineFloating;\n    const sideThree = midValue * sineAfter;\n    const sideThreeIndex = (angleFloating.index + 1) % tmpUserInputArray.length;\n\n    const sideTwo = midValue * sineBefore;\n    const sideTwoIndex = angleFloating.index - 1;\n\n    tmpUserInputArray[side.index + 1] = angleAfter;\n    tmpUserInputArray[angleAttachedBeforeIndex] = angleBefore;\n    tmpUserInputArray[angleFloating.index] = angleFloating.value;\n    tmpUserInputArray[sideThreeIndex] = sideThree;\n    tmpUserInputArray[sideTwoIndex] = sideTwo;\n    return tmpUserInputArray;\n  };\n\n  const sideWithTwoAttachedAngles = (userInputArray) => {\n    const tmpUserInputArray = userInputArray;\n\n    let side;\n    let angleBefore;\n    let angleAfter;\n\n    tmpUserInputArray.forEach((item, position) => {\n      if (item > 0 && position % 2 === 0) {\n        // angle before is y\n        let angleAttachedBeforeIndex = position - 1;\n        if (angleAttachedBeforeIndex === -1) {\n          angleAttachedBeforeIndex = 5;\n        }\n\n        const angleAttachedBeforeBool = tmpUserInputArray[angleAttachedBeforeIndex] > 0;\n        const angleAttachedAfterBool = tmpUserInputArray[position + 1] > 0;\n\n        if (angleAttachedBeforeBool && angleAttachedAfterBool) {\n          side = { value: item, index: position };\n\n          angleBefore = {\n            value: tmpUserInputArray[angleAttachedBeforeIndex],\n            index: angleAttachedBeforeIndex,\n          };\n          angleAfter = {\n            value: tmpUserInputArray[position + 1],\n            index: position + 1,\n          };\n        }\n      }\n    });\n\n    const angleFloating = {\n      value: 180 - angleBefore.value - angleAfter.value,\n      index: (angleAfter.index + 2) % tmpUserInputArray.length,\n    };\n\n    // exactly the same as OneSideAngleAttachedAngleFloating\n    const angleFloatingRadians = (Math.PI / 180) * angleFloating.value;\n    const sineFloating = Math.sin(angleFloatingRadians);\n\n    const angleAfterRadians = (Math.PI / 180) * angleAfter.value;\n    const sineAfter = Math.sin(angleAfterRadians);\n\n    const angleBeforeRadians = (Math.PI / 180) * angleBefore.value;\n    const sineBefore = Math.sin(angleBeforeRadians);\n\n    const midValue = side.value / sineFloating;\n    const sideThree = midValue * sineAfter;\n    const sideThreeIndex = (angleFloating.index + 1) % tmpUserInputArray.length;\n\n    const sideTwo = midValue * sineBefore;\n    const sideTwoIndex = angleFloating.index - 1;\n\n    tmpUserInputArray[angleAfter.index] = angleAfter.value;\n    tmpUserInputArray[angleBefore.index] = angleBefore.value;\n    tmpUserInputArray[angleFloating.index] = angleFloating.value;\n    tmpUserInputArray[sideThreeIndex] = sideThree;\n    tmpUserInputArray[sideTwoIndex] = sideTwo;\n\n    return tmpUserInputArray;\n  };\n\n  const twoAngles = (userInputArray) => {\n    const tmpUserInputArray = userInputArray;\n\n    const anglesWithValue = [];\n\n    tmpUserInputArray.forEach((item, position) => {\n      if (item > 0 && position % 2 === 1) {\n        anglesWithValue.push({ value: item, index: position });\n      }\n    });\n\n    let angleOne = anglesWithValue[0];\n    let angleTwo = anglesWithValue[1];\n    if (anglesWithValue[0].index === 1 && anglesWithValue[1].index === 5) {\n      // eslint-disable-next-line prefer-destructuring\n      angleOne = anglesWithValue[1];\n      // eslint-disable-next-line prefer-destructuring\n      angleTwo = anglesWithValue[0];\n    }\n    tmpUserInputArray[(angleTwo.index + 2) % tmpUserInputArray.length] =\n      180 - angleOne.value - angleTwo.value;\n    // set side in the middle to 100 (preparation for sideWithTwoAttachedAngles)\n    tmpUserInputArray[angleOne.index + (1 % tmpUserInputArray.length)] = 100;\n\n    const tmpUserInputArrayExample = sideWithTwoAttachedAngles(tmpUserInputArray);\n\n    return tmpUserInputArrayExample;\n  };\n\n  const initCalcMap = [\n    {\n      calcFunction: allSides,\n      mappingArrays: [[1, 0, 1, 0, 1, 0]],\n      matchingCount: 0,\n      minRequiredMatches: 3,\n    },\n    {\n      calcFunction: twoSidesAngleAttached,\n      mappingArrays: [\n        [0, 0, 1, 0, 1, 1],\n        [1, 1, 0, 0, 1, 0],\n        [1, 0, 1, 1, 0, 0],\n        [1, 0, 0, 1, 1, 0],\n        [1, 0, 1, 0, 0, 1],\n        [0, 1, 1, 0, 1, 0],\n      ],\n      matchingCount: 0,\n      minRequiredMatches: 3,\n    },\n    {\n      calcFunction: twoSidesAngleBetween,\n      mappingArrays: [\n        [0, 0, 1, 1, 1, 0],\n        [1, 0, 0, 0, 1, 1],\n        [1, 1, 1, 0, 0, 0],\n      ],\n      matchingCount: 0,\n      minRequiredMatches: 3,\n    },\n    {\n      calcFunction: oneSideAngleAttachedAngleFloating,\n      mappingArrays: [\n        [0, 0, 1, 1, 0, 1],\n        [0, 1, 0, 0, 1, 1],\n        [1, 1, 0, 1, 0, 0],\n        [0, 1, 0, 1, 1, 0],\n        [1, 0, 0, 1, 0, 1],\n        [0, 1, 1, 0, 0, 1],\n      ],\n      matchingCount: 0,\n      minRequiredMatches: 3,\n    },\n    {\n      calcFunction: sideWithTwoAttachedAngles,\n      mappingArrays: [\n        [0, 0, 0, 1, 1, 1],\n        [1, 1, 0, 0, 0, 1],\n        [0, 1, 1, 1, 0, 0],\n      ],\n      matchingCount: 0,\n      minRequiredMatches: 3,\n    },\n    {\n      calcFunction: twoAngles,\n      mappingArrays: [\n        [0, 0, 0, 1, 0, 1],\n        [0, 1, 0, 0, 0, 1],\n        [0, 1, 0, 1, 0, 0],\n      ],\n      matchingCount: 0,\n      minRequiredMatches: 2,\n    },\n  ];\n\n  const compareInputToCalcMappings = () => {\n    const flattenValue = (input) => (input === 0 ? 0 : 1);\n\n    const userInputArray = [\n      userInput.straightA,\n      userInput.angleBeta,\n      userInput.straightC,\n      userInput.angleAlpha,\n      userInput.straightB,\n      userInput.angleGamma,\n    ];\n\n    const userInputArrayFlattened = [\n      flattenValue(userInput.straightA),\n      flattenValue(userInput.angleBeta),\n      flattenValue(userInput.straightC),\n      flattenValue(userInput.angleAlpha),\n      flattenValue(userInput.straightB),\n      flattenValue(userInput.angleGamma),\n    ];\n\n    let calcMap = initCalcMap;\n\n    // loop through all calc maps\n    calcMap.forEach((actualCalcMap, i) => {\n      const tmpCountArray = [];\n      // loop through all mapping arrays\n      actualCalcMap.mappingArrays.forEach((actualMappingArray) => {\n        let tmpCount = 0;\n        // loop through each value in the mapping array\n        actualMappingArray.forEach((actualMappingArrayValue, j) => {\n          if (actualMappingArrayValue === 1 && userInputArrayFlattened[j] === 1) {\n            tmpCount += 1;\n          }\n        });\n        tmpCountArray.push(tmpCount);\n      });\n      calcMap[i].matchingCount = Math.max.apply(null, tmpCountArray);\n    });\n    // remove all elements where the matching count is < the required matches\n    calcMap = calcMap.filter((value) => value.matchingCount >= value.minRequiredMatches);\n\n    // sort the calcMap by matchingCount\n    calcMap.sort((a, b) => b.matchingCount - a.matchingCount);\n\n    if (calcMap.length > 0) {\n      const result = calcMap[0].calcFunction(userInputArray);\n\n      setUserInput({\n        straightA: result[0],\n        angleBeta: result[1],\n        straightC: result[2],\n        angleAlpha: result[3],\n        straightB: result[4],\n        angleGamma: result[5],\n      });\n\n      setShowCanvas(true);\n    } else {\n      setShowCanvas(false);\n      setIsError(true);\n    }\n  };\n\n  const handleInput = (event) => {\n    setUserInput({ ...userInput, [event.target.name]: event.target.value });\n  };\n\n  const resetCalculator = () => {\n    setUserInput({\n      straightA: 0,\n      angleBeta: 0,\n      straightC: 0,\n      angleAlpha: 0,\n      straightB: 0,\n      angleGamma: 0,\n    });\n\n    setShowCanvas(false);\n    setIsError(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Triangle Calculator</h1>\n      <InputForm\n        handleInput={handleInput}\n        userInput={userInput}\n        calculate={compareInputToCalcMappings}\n        disabled={showCanvas}\n        resetCalculator={resetCalculator}\n      />\n      {isError === true ? (\n        <div className=\"errorContainer\">\n          <p>Mit diesen Eingaben ist keine Berechnung möglich.</p>\n        </div>\n      ) : (\n        ''\n      )}\n      {showCanvas === true ? <Canvas sideC={50} sideA={100} angleB={100} /> : ''}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}