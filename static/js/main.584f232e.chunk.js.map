{"version":3,"sources":["UserNumberInput.jsx","InputForm.jsx","Canvas.jsx","App.jsx","index.jsx"],"names":["UserNumberInput","props","useState","invalidInput","setInvalidInput","className","TextField","type","label","straightA","angleAlpha","straightB","angleBeta","straightC","angleGamma","name","onChange","e","target","value","Number","isNaN","parseFloat","handleInput","errorText","userInput","disabled","error","helperText","InputForm","Button","sx","margin","variant","onClick","calculate","resetCalculator","Canvas","toRadians","angle","Math","PI","bX","sideA","cX","angleB","sideC","sin","cY","cos","canvasRef","useRef","useEffect","multiplier","calculateLargestDistance","x1","y1","x2","y2","x","y","sqrt","distanceAToB","distanceAToC","distanceBToC","largestDistance","calculateMultiplier","context","current","getContext","beginPath","moveTo","lineTo","closePath","stroke","width","height","ref","App","setUserInput","showCanvas","setShowCanvas","isError","setIsError","initCalcMap","calcFunction","userInputArray","tmpUserInputArray","a","b","c","acos","mappingArrays","matchingCount","minRequiredMatches","sidesWithValue","forEach","item","position","push","index","sideOne","sideTwo","angleAtSideOneIndex","length","angleAtSideOneRadians","angleAtSideTwoRadians","angleAtSideTwoIndex","angleBetweenIndex","sideThreeIndex","angleAtSideOne","angleAtSideTwo","angleBetween","asin","angleBetweenRadians","sideThree","cosine","pow","side","angleAttached","angleFloating","angleAttachedBeforeIndex","angleAfter","angleBefore","angleAttachedBeforeBool","angleAttachedAfterBool","angleFloatingIndex","angleFloatingRadians","sineFloating","angleAfterRadians","sineAfter","angleBeforeRadians","sineBefore","midValue","sideTwoIndex","anglesWithValue","angleOne","angleTwo","event","flattenValue","input","userInputArrayFlattened","calcMap","actualCalcMap","i","tmpCountArray","actualMappingArray","tmpCount","actualMappingArrayValue","j","max","apply","sort","result","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.584f232e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { TextField } from \"@mui/material\";\n\nexport default function UserNumberInput(props) {\n  const labelMapping = {\n    straightA: \"Seite A\",\n    angleAlpha: \"Winkel Alpha\",\n    straightB: \"Seite B\",\n    angleBeta: \"Winkel Beta\",\n    straightC: \"Seite C\",\n    angleGamma: \"Winkel Gamma\",\n  };\n\n  const [invalidInput, setInvalidInput] = useState(false);\n\n  return (\n    <div className=\"inputFieldContainer\">\n      <TextField\n        type=\"text\"\n        label={labelMapping[props.name]}\n        name={props.name}\n        onChange={(e) => {\n          if (\n            e.target.value === \"\" ||\n            !Number.isNaN(Number.parseFloat(e.target.value))\n          ) {\n            setInvalidInput(false);\n            props.handleInput(e);\n          } else {\n            setInvalidInput(true);\n          }\n        }}\n        errorText=\"error\"\n        value={props.userInput[props.name]}\n        disabled={props.disabled}\n        error={invalidInput}\n        helperText={invalidInput === true ? \"ungültige Eingabe\" : \"\"}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Button } from \"@mui/material\";\nimport UserNumberInput from \"./UserNumberInput\";\n\nexport default function InputForm(props) {\n  return (\n    <div className=\"inputForm\">\n      <UserNumberInput\n        name=\"straightA\"\n        handleInput={props.handleInput}\n        userInput={props.userInput}\n        disabled={props.disabled}\n      />\n      <UserNumberInput\n        name=\"angleBeta\"\n        handleInput={props.handleInput}\n        userInput={props.userInput}\n        disabled={props.disabled}\n      />\n      <UserNumberInput\n        name=\"straightC\"\n        handleInput={props.handleInput}\n        userInput={props.userInput}\n        disabled={props.disabled}\n      />\n      <UserNumberInput\n        name=\"angleAlpha\"\n        handleInput={props.handleInput}\n        userInput={props.userInput}\n        disabled={props.disabled}\n      />\n      <UserNumberInput\n        name=\"straightB\"\n        handleInput={props.handleInput}\n        userInput={props.userInput}\n        disabled={props.disabled}\n      />\n      <UserNumberInput\n        name=\"angleGamma\"\n        handleInput={props.handleInput}\n        userInput={props.userInput}\n        disabled={props.disabled}\n      />\n      <div className=\"buttonContainer\">\n        <Button\n          sx={{ margin: \"10px\" }}\n          variant=\"outlined\"\n          onClick={props.calculate}\n          disabled={props.disabled}\n        >\n          Berechnen\n        </Button>\n        <Button\n          sx={{ margin: \"10px\" }}\n          variant=\"outlined\"\n          onClick={props.resetCalculator}\n        >\n          Zurücksetzen\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useRef } from \"react\";\n\nexport default function Canvas(props) {\n  const toRadians = (angle) => angle * (Math.PI / 180);\n\n  const aX = 0;\n  const aY = 0;\n  const bX = aX + props.sideA;\n  const bY = aY;\n  const cX = () => {\n    if (props.angleB < 90) {\n      return bX - props.sideC * Math.sin(toRadians(90 - props.angleB));\n    }\n    return bX + props.sideC * Math.sin(-1 * toRadians(90 - props.angleB));\n  };\n  const cY = () => {\n    if (props.angleB < 90) {\n      return bY + props.sideC * Math.cos(toRadians(90 - props.angleB));\n    }\n    return bY + props.sideC * Math.cos(-1 * toRadians(90 - props.angleB));\n  };\n\n  const canvasRef = useRef(null);\n\n  const calculateMultiplier = () => {\n    const calculateLargestDistance = (x1, y1, x2, y2) => {\n      const x = x1 - x2;\n      const y = y1 - y2;\n\n      return Math.sqrt(x * x + y * y);\n    };\n\n    const distanceAToB = calculateLargestDistance(aX, aY, bX, bY);\n    const distanceAToC = calculateLargestDistance(aX, aY, cX(), cY());\n    const distanceBToC = calculateLargestDistance(bX, bY, cX(), cY());\n\n    let largestDistance = 0;\n\n    if (distanceAToB > largestDistance) largestDistance = distanceAToB;\n    if (distanceAToC > largestDistance) largestDistance = distanceAToC;\n    if (distanceBToC > largestDistance) largestDistance = distanceBToC;\n\n    return 400 / largestDistance;\n  };\n\n  useEffect(() => {\n    const multiplier = calculateMultiplier();\n\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    context.beginPath();\n    context.moveTo(aX, aY);\n    context.lineTo(bX * multiplier, bY * multiplier);\n    context.lineTo(cX() * multiplier, cY() * multiplier);\n    context.closePath();\n    context.stroke();\n  }, []);\n\n  return (\n    <div className=\"canvasContainer\">\n      <canvas width=\"400\" height=\"400\" ref={canvasRef} />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport InputForm from \"./InputForm\";\nimport Canvas from \"./Canvas\";\n\nfunction App() {\n  const [userInput, setUserInput] = useState({\n    straightA: 0,\n    angleAlpha: 0,\n    straightB: 0,\n    angleBeta: 0,\n    straightC: 0,\n    angleGamma: 0,\n  });\n\n  const [showCanvas, setShowCanvas] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const allSides = (userInputArray) => {\n    const tmpUserInputArray = userInputArray;\n\n    const a = userInputArray[0];\n    const b = userInputArray[2];\n    const c = userInputArray[4];\n\n    tmpUserInputArray[1] =\n      Math.acos((a * a - b * b - c * c) / (-2 * b * c)) / (Math.PI / 180);\n    tmpUserInputArray[3] =\n      Math.acos((b * b - a * a - c * c) / (-2 * a * c)) / (Math.PI / 180);\n    tmpUserInputArray[5] = 180 - userInputArray[1] - userInputArray[3];\n\n    return tmpUserInputArray;\n  };\n\n  const twoSidesAngleAttached = (userInputArray) => {\n    const tmpUserInputArray = userInputArray;\n\n    const sidesWithValue = [];\n    tmpUserInputArray.forEach((item, position) => {\n      if (item > 0 && position % 2 === 0) {\n        sidesWithValue.push({ value: item, index: position });\n      }\n    });\n\n    // index angehängter Winkel immer sideOne -1 oder sideTwo +1\n    let sideOne = sidesWithValue[0];\n    let sideTwo = sidesWithValue[1];\n\n    // case if the two sides are a and b, array begins at a so side b would be sideOne even if index of it is higher\n    if (sidesWithValue[0].index === 0 && sidesWithValue[1].index === 4) {\n      // eslint-disable-next-line prefer-destructuring\n      sideOne = sidesWithValue[1];\n      // eslint-disable-next-line prefer-destructuring\n      sideTwo = sidesWithValue[0];\n    }\n\n    let angleAtSideOneIndex = (sideOne.index - 1) % tmpUserInputArray.length;\n    // only happens when sides a and c are present\n    if (angleAtSideOneIndex === -1) {\n      angleAtSideOneIndex = 5;\n    }\n\n    const angleAtSideTwoIndex = sideTwo.index + 1;\n    const angleBetweenIndex = sideOne.index + 1;\n    const sideThreeIndex = (sideTwo.index + 2) % tmpUserInputArray.length;\n\n    let angleAtSideOne = tmpUserInputArray[angleAtSideOneIndex];\n    let angleAtSideTwo = tmpUserInputArray[angleAtSideTwoIndex];\n    let angleBetween = tmpUserInputArray[angleBetweenIndex];\n    let angleAtSideOneRadians;\n    let angleAtSideTwoRadians;\n\n    if (angleAtSideOne > 0) {\n      // calculate angleAtSideTwo\n\n      angleAtSideOneRadians = (Math.PI / 180) * angleAtSideOne;\n      angleAtSideTwoRadians = Math.asin(\n        (Math.sin(angleAtSideOneRadians) / sideTwo.value) * sideOne.value\n      );\n      angleAtSideTwo = (180 / Math.PI) * angleAtSideTwoRadians;\n    } else {\n      // calculate angle at side one\n\n      angleAtSideTwoRadians = (Math.PI / 180) * angleAtSideTwo;\n\n      const sin = Math.sin(angleAtSideTwoRadians) / sideOne.value;\n\n      angleAtSideOneRadians = Math.asin(sin * sideTwo.value);\n\n      angleAtSideOne = (180 / Math.PI) * angleAtSideOneRadians;\n    }\n    angleBetween = 180 - angleAtSideOne - angleAtSideTwo;\n\n    const angleBetweenRadians = (Math.PI / 180) * angleBetween;\n    const sideThree =\n      (sideTwo.value / Math.sin(angleAtSideOneRadians)) *\n      Math.sin(angleBetweenRadians);\n\n    tmpUserInputArray[angleBetweenIndex] = angleBetween;\n    tmpUserInputArray[angleAtSideOneIndex] = angleAtSideOne;\n    tmpUserInputArray[angleAtSideTwoIndex] = angleAtSideTwo;\n    tmpUserInputArray[sideThreeIndex] = sideThree;\n\n    return tmpUserInputArray;\n  };\n\n  const twoSidesAngleBetween = (userInputArray) => {\n    const tmpUserInputArray = userInputArray;\n\n    // same as twoSidesOneAngleAttached\n    const sidesWithValue = [];\n\n    tmpUserInputArray.forEach((item, position) => {\n      if (item > 0 && position % 2 === 0) {\n        sidesWithValue.push({ value: item, index: position });\n      }\n    });\n\n    // index angehängter Winkel immer sideOne -1 oder sideTwo +1\n    let sideOne = sidesWithValue[0];\n    let sideTwo = sidesWithValue[1];\n\n    // case if the two sides are a and b, array begins at a so side b would be sideOne even if index of it is higher\n    if (sidesWithValue[0].index === 0 && sidesWithValue[1].index === 4) {\n      // eslint-disable-next-line prefer-destructuring\n      sideOne = sidesWithValue[1];\n      // eslint-disable-next-line prefer-destructuring\n      sideTwo = sidesWithValue[0];\n    }\n\n    let angleAtSideOneIndex = (sideOne.index - 1) % tmpUserInputArray.length;\n\n    // only happens when sides a and c are present\n    if (angleAtSideOneIndex === -1) {\n      angleAtSideOneIndex = 5;\n    }\n\n    const angleAtSideTwoIndex = sideTwo.index + 1;\n    const angleBetweenIndex = sideOne.index + 1;\n    const sideThreeIndex = (sideTwo.index + 2) % tmpUserInputArray.length;\n    const angleBetween = tmpUserInputArray[angleBetweenIndex];\n    const angleBetweenRadians = (Math.PI / 180) * angleBetween;\n\n    let angleAtSideOne = tmpUserInputArray[angleAtSideOneIndex];\n    let angleAtSideTwo = tmpUserInputArray[angleAtSideTwoIndex];\n\n    const cosine = Math.cos(angleBetweenRadians);\n    const sideThree = Math.sqrt(\n      // eslint-disable-next-line no-restricted-properties\n      Math.pow(sideTwo.value, 2) +\n        // eslint-disable-next-line no-restricted-properties\n        Math.pow(sideOne.value, 2) -\n        2 * sideTwo.value * sideOne.value * cosine\n    );\n\n    // same as before\n    // you can calculate angle of side two if you have angle at side one, side one and side two\n    const angleAtSideOneRadians = Math.asin(\n      (Math.sin(angleBetweenRadians) / sideThree) * sideTwo.value\n    );\n    angleAtSideOne = angleAtSideOneRadians / (Math.PI / 180);\n    angleAtSideTwo = 180 - angleAtSideOne - angleBetween;\n\n    tmpUserInputArray[angleBetweenIndex] = angleBetween;\n    tmpUserInputArray[angleAtSideOneIndex] = angleAtSideOne;\n    tmpUserInputArray[angleAtSideTwoIndex] = angleAtSideTwo;\n    tmpUserInputArray[sideThreeIndex] = sideThree;\n\n    return tmpUserInputArray;\n  };\n\n  const oneSideAngleAttachedAngleFloating = (userInputArray) => {\n    const tmpUserInputArray = userInputArray;\n\n    let side;\n    let angleAttached;\n    let angleFloating;\n\n    let angleAttachedBeforeBool = false;\n    let angleAttachedAfterBool = false;\n\n    let angleAttachedBeforeIndex;\n\n    tmpUserInputArray.forEach((item, position) => {\n      if (item > 0 && position % 2 === 0) {\n        // angle before is y\n        angleAttachedBeforeIndex = position - 1;\n        if (angleAttachedBeforeIndex === -1) {\n          angleAttachedBeforeIndex = 5;\n        }\n\n        angleAttachedBeforeBool =\n          tmpUserInputArray[angleAttachedBeforeIndex] > 0;\n        angleAttachedAfterBool = tmpUserInputArray[position + 1] > 0;\n\n        const angleAttachedBool =\n          angleAttachedBeforeBool || angleAttachedAfterBool;\n        const angleAttachedAndAngleFloating =\n          angleAttachedBool &&\n          tmpUserInputArray[(position + 3) % tmpUserInputArray.length] > 0;\n\n        if (angleAttachedAndAngleFloating) {\n          side = { value: item, index: position };\n          const angleFloatingIndex = (position + 3) % tmpUserInputArray.length;\n          angleFloating = {\n            value: tmpUserInputArray[angleFloatingIndex],\n            index: angleFloatingIndex,\n          };\n\n          if (angleAttachedBeforeBool) {\n            angleAttached = tmpUserInputArray[angleAttachedBeforeIndex];\n          } else {\n            angleAttached = tmpUserInputArray[position + 1];\n          }\n        }\n      }\n    });\n    let angleAfter;\n    let angleBefore;\n    // angle that is known is after the known side\n    if (angleAttachedAfterBool) {\n      angleAfter = angleAttached;\n      angleBefore = 180 - angleAfter - angleFloating.value;\n    }\n    // angle that is known is before the known side\n    else {\n      angleBefore = angleAttached;\n      angleAfter = 180 - angleBefore - angleFloating.value;\n    }\n    // we have all angles and one side\n    const angleFloatingRadians = (Math.PI / 180) * angleFloating.value;\n    const sineFloating = Math.sin(angleFloatingRadians);\n\n    const angleAfterRadians = (Math.PI / 180) * angleAfter;\n    const sineAfter = Math.sin(angleAfterRadians);\n\n    const angleBeforeRadians = (Math.PI / 180) * angleBefore;\n    const sineBefore = Math.sin(angleBeforeRadians);\n\n    const midValue = side.value / sineFloating;\n    const sideThree = midValue * sineAfter;\n    const sideThreeIndex = (angleFloating.index + 1) % tmpUserInputArray.length;\n\n    const sideTwo = midValue * sineBefore;\n    const sideTwoIndex = angleFloating.index - 1;\n\n    tmpUserInputArray[side.index + 1] = angleAfter;\n    tmpUserInputArray[angleAttachedBeforeIndex] = angleBefore;\n    tmpUserInputArray[angleFloating.index] = angleFloating.value;\n    tmpUserInputArray[sideThreeIndex] = sideThree;\n    tmpUserInputArray[sideTwoIndex] = sideTwo;\n    return tmpUserInputArray;\n  };\n\n  const sideWithTwoAttachedAngles = (userInputArray) => {\n    const tmpUserInputArray = userInputArray;\n\n    let side;\n    let angleBefore;\n    let angleAfter;\n\n    tmpUserInputArray.forEach((item, position) => {\n      if (item > 0 && position % 2 === 0) {\n        // angle before is y\n        let angleAttachedBeforeIndex = position - 1;\n        if (angleAttachedBeforeIndex === -1) {\n          angleAttachedBeforeIndex = 5;\n        }\n\n        const angleAttachedBeforeBool =\n          tmpUserInputArray[angleAttachedBeforeIndex] > 0;\n        const angleAttachedAfterBool = tmpUserInputArray[position + 1] > 0;\n\n        if (angleAttachedBeforeBool && angleAttachedAfterBool) {\n          side = { value: item, index: position };\n\n          angleBefore = {\n            value: tmpUserInputArray[angleAttachedBeforeIndex],\n            index: angleAttachedBeforeIndex,\n          };\n          angleAfter = {\n            value: tmpUserInputArray[position + 1],\n            index: position + 1,\n          };\n        }\n      }\n    });\n\n    const angleFloating = {\n      value: 180 - angleBefore.value - angleAfter.value,\n      index: (angleAfter.index + 2) % tmpUserInputArray.length,\n    };\n\n    // exactly the same as OneSideAngleAttachedAngleFloating\n    const angleFloatingRadians = (Math.PI / 180) * angleFloating.value;\n    const sineFloating = Math.sin(angleFloatingRadians);\n\n    const angleAfterRadians = (Math.PI / 180) * angleAfter.value;\n    const sineAfter = Math.sin(angleAfterRadians);\n\n    const angleBeforeRadians = (Math.PI / 180) * angleBefore.value;\n    const sineBefore = Math.sin(angleBeforeRadians);\n\n    const midValue = side.value / sineFloating;\n    const sideThree = midValue * sineAfter;\n    const sideThreeIndex = (angleFloating.index + 1) % tmpUserInputArray.length;\n\n    const sideTwo = midValue * sineBefore;\n    const sideTwoIndex = angleFloating.index - 1;\n\n    tmpUserInputArray[angleAfter.index] = angleAfter.value;\n    tmpUserInputArray[angleBefore.index] = angleBefore.value;\n    tmpUserInputArray[angleFloating.index] = angleFloating.value;\n    tmpUserInputArray[sideThreeIndex] = sideThree;\n    tmpUserInputArray[sideTwoIndex] = sideTwo;\n\n    return tmpUserInputArray;\n  };\n\n  const twoAngles = (userInputArray) => {\n    const tmpUserInputArray = userInputArray;\n\n    const anglesWithValue = [];\n\n    tmpUserInputArray.forEach((item, position) => {\n      if (item > 0 && position % 2 === 1) {\n        anglesWithValue.push({ value: item, index: position });\n      }\n    });\n\n    let angleOne = anglesWithValue[0];\n    let angleTwo = anglesWithValue[1];\n    if (anglesWithValue[0].index === 1 && anglesWithValue[1].index === 5) {\n      // eslint-disable-next-line prefer-destructuring\n      angleOne = anglesWithValue[1];\n      // eslint-disable-next-line prefer-destructuring\n      angleTwo = anglesWithValue[0];\n    }\n    tmpUserInputArray[(angleTwo.index + 2) % tmpUserInputArray.length] =\n      180 - angleOne.value - angleTwo.value;\n    // set side in the middle to 100 (preparation for sideWithTwoAttachedAngles)\n    tmpUserInputArray[angleOne.index + (1 % tmpUserInputArray.length)] = 100;\n\n    return tmpUserInputArray;\n  };\n\n  const initCalcMap = [\n    {\n      calcFunction: allSides,\n      mappingArrays: [[1, 0, 1, 0, 1, 0]],\n      matchingCount: 0,\n      minRequiredMatches: 3,\n    },\n    {\n      calcFunction: twoSidesAngleAttached,\n      mappingArrays: [\n        [0, 0, 1, 0, 1, 1],\n        [1, 1, 0, 0, 1, 0],\n        [1, 0, 1, 1, 0, 0],\n        [1, 0, 0, 1, 1, 0],\n        [1, 0, 1, 0, 0, 1],\n        [0, 1, 1, 0, 1, 0],\n      ],\n      matchingCount: 0,\n      minRequiredMatches: 3,\n    },\n    {\n      calcFunction: twoSidesAngleBetween,\n      mappingArrays: [\n        [0, 0, 1, 1, 1, 0],\n        [1, 0, 0, 0, 1, 1],\n        [1, 1, 1, 0, 0, 0],\n      ],\n      matchingCount: 0,\n      minRequiredMatches: 3,\n    },\n    {\n      calcFunction: oneSideAngleAttachedAngleFloating,\n      mappingArrays: [\n        [0, 0, 1, 1, 0, 1],\n        [0, 1, 0, 0, 1, 1],\n        [1, 1, 0, 1, 0, 0],\n        [0, 1, 0, 1, 1, 0],\n        [1, 0, 0, 1, 0, 1],\n        [0, 1, 1, 0, 0, 1],\n      ],\n      matchingCount: 0,\n      minRequiredMatches: 3,\n    },\n    {\n      calcFunction: sideWithTwoAttachedAngles,\n      mappingArrays: [\n        [0, 0, 0, 1, 1, 1],\n        [1, 1, 0, 0, 0, 1],\n        [0, 1, 1, 1, 0, 0],\n      ],\n      matchingCount: 0,\n      minRequiredMatches: 3,\n    },\n    {\n      calcFunction: twoAngles,\n      mappingArrays: [\n        [0, 0, 0, 1, 0, 1],\n        [0, 1, 0, 0, 0, 1],\n        [0, 1, 0, 1, 0, 0],\n      ],\n      matchingCount: 0,\n      minRequiredMatches: 2,\n    },\n  ];\n\n  const compareInputToCalcMappings = () => {\n    const flattenValue = (input) => (input === 0 ? 0 : 1);\n\n    const userInputArray = [\n      userInput.straightA,\n      userInput.angleBeta,\n      userInput.straightC,\n      userInput.angleAlpha,\n      userInput.straightB,\n      userInput.angleGamma,\n    ];\n\n    const userInputArrayFlattened = [\n      flattenValue(userInput.straightA),\n      flattenValue(userInput.angleBeta),\n      flattenValue(userInput.straightC),\n      flattenValue(userInput.angleAlpha),\n      flattenValue(userInput.straightB),\n      flattenValue(userInput.angleGamma),\n    ];\n\n    const calcMap = initCalcMap;\n\n    // loop through all calc maps\n    calcMap.forEach((actualCalcMap, i) => {\n      const tmpCountArray = [];\n      // loop through all mapping arrays\n      actualCalcMap.mappingArrays.forEach((actualMappingArray) => {\n        let tmpCount = 0;\n        // loop through each value in the mapping array\n        actualMappingArray.forEach((actualMappingArrayValue, j) => {\n          if (\n            actualMappingArrayValue === 1 &&\n            userInputArrayFlattened[j] === 1\n          ) {\n            tmpCount += 1;\n          }\n        });\n        tmpCountArray.push(tmpCount);\n      });\n      calcMap[i].matchingCount = Math.max.apply(null, tmpCountArray);\n    });\n    calcMap.sort((a, b) => b.matchingCount - a.matchingCount);\n\n    if (calcMap[0].minRequiredMatches <= calcMap[0].matchingCount) {\n      const result = calcMap[0].calcFunction(userInputArray);\n\n      setUserInput({\n        straightA: result[0],\n        angleBeta: result[1],\n        straightC: result[2],\n        angleAlpha: result[3],\n        straightB: result[4],\n        angleGamma: result[5],\n      });\n\n      setShowCanvas(true);\n    } else {\n      setShowCanvas(false);\n      setIsError(true);\n    }\n  };\n\n  const handleInput = (event) => {\n    setUserInput({ ...userInput, [event.target.name]: event.target.value });\n  };\n\n  const resetCalculator = () => {\n    setUserInput({\n      straightA: 0,\n      angleBeta: 0,\n      straightC: 0,\n      angleAlpha: 0,\n      straightB: 0,\n      angleGamma: 0,\n    });\n\n    setShowCanvas(false);\n    setIsError(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Triangle Calculator</h1>\n      <InputForm\n        handleInput={handleInput}\n        userInput={userInput}\n        calculate={compareInputToCalcMappings}\n        disabled={showCanvas}\n        resetCalculator={resetCalculator}\n      />\n      {isError === true ? (\n        <div className=\"errorContainer\">\n          <p>Mit diesen Eingaben ist keine Berechnung möglich.</p>\n        </div>\n      ) : (\n        \"\"\n      )}\n      {showCanvas === true ? (\n        <Canvas sideC={50} sideA={100} angleB={100} />\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}